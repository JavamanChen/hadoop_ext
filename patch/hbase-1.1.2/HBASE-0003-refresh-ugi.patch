 .../org/apache/hadoop/hbase/client/HBaseAdmin.java | 29 ++++++++--
 hbase-protocol/src/main/protobuf/Refresh.proto     | 20 +++++++
 .../coprocessor/RefreshServiceCoprocessor.java     | 61 ++++++++++++++++++++++
 3 files changed, 105 insertions(+), 5 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index 5a0def3..ea8f65b 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -20,7 +20,6 @@ package org.apache.hadoop.hbase.client;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
-import java.net.SocketTimeoutException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -28,12 +27,12 @@ import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.regex.Pattern;
 
 import org.apache.commons.logging.Log;
@@ -52,13 +51,11 @@ import org.apache.hadoop.hbase.MasterNotRunningException;
 import org.apache.hadoop.hbase.MetaTableAccessor;
 import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.NotServingRegionException;
-import org.apache.hadoop.hbase.RegionException;
 import org.apache.hadoop.hbase.RegionLocations;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableExistsException;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.TableNotDisabledException;
-import org.apache.hadoop.hbase.TableNotEnabledException;
 import org.apache.hadoop.hbase.TableNotFoundException;
 import org.apache.hadoop.hbase.UnknownRegionException;
 import org.apache.hadoop.hbase.ZooKeeperConnectionException;
@@ -142,6 +139,9 @@ import org.apache.hadoop.hbase.protobuf.generated.MasterProtos.SnapshotResponse;
 import org.apache.hadoop.hbase.protobuf.generated.MasterProtos.StopMasterRequest;
 import org.apache.hadoop.hbase.protobuf.generated.MasterProtos.TruncateTableRequest;
 import org.apache.hadoop.hbase.protobuf.generated.MasterProtos.UnassignRegionRequest;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshService;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshUserToGroupsMappingsRequest;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshUserToGroupsMappingsResponse;
 import org.apache.hadoop.hbase.quotas.QuotaFilter;
 import org.apache.hadoop.hbase.quotas.QuotaRetriever;
 import org.apache.hadoop.hbase.quotas.QuotaSettings;
@@ -164,6 +164,7 @@ import org.apache.zookeeper.KeeperException;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.protobuf.ByteString;
+import com.google.protobuf.RpcCallback;
 import com.google.protobuf.ServiceException;
 
 /**
@@ -4279,4 +4280,22 @@ public class HBaseAdmin implements Admin {
       }
     }
   }
+
+  public void refreshUserToGroupsMappings(final String serverName){
+    CoprocessorRpcChannel channel = null;
+    if(serverName == null){
+      channel = coprocessorService();
+    }else{
+      channel = coprocessorService(ServerName.valueOf(serverName));
+    }
+    RefreshService.Interface service = RefreshService.newStub(channel);
+    service.refreshUserToGroupsMappings(null, RefreshUserToGroupsMappingsRequest.newBuilder().build(), 
+      new RpcCallback<RefreshUserToGroupsMappingsResponse>(){
+        @Override
+        public void run(RefreshUserToGroupsMappingsResponse parameter) {
+          LOG.info("refreshUserToGroupsMappings on " + (serverName == null ? "master" : serverName) + " finished.");
+        }
+      }
+    );
+  }
 }
diff --git a/hbase-protocol/src/main/protobuf/Refresh.proto b/hbase-protocol/src/main/protobuf/Refresh.proto
new file mode 100644
index 0000000..b52a28a
--- /dev/null
+++ b/hbase-protocol/src/main/protobuf/Refresh.proto
@@ -0,0 +1,20 @@
+option java_package = "org.apache.hadoop.hbase.protobuf.generated";
+option java_outer_classname = "RefreshProtos";
+option java_generic_services = true;
+option java_generate_equals_and_hash = true;
+option optimize_for = SPEED;
+
+message GetUserGroupsRequest { 
+  required string user = 1;
+}
+message GetUserGroupsResponse {
+  repeated string groups = 1;
+}
+
+message RefreshUserToGroupsMappingsRequest { }
+message RefreshUserToGroupsMappingsResponse { }
+
+service RefreshService {
+  rpc getUserGroups(GetUserGroupsRequest) returns(GetUserGroupsResponse);
+  rpc refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest) returns(RefreshUserToGroupsMappingsResponse);
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RefreshServiceCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RefreshServiceCoprocessor.java
new file mode 100644
index 0000000..82004b3
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RefreshServiceCoprocessor.java
@@ -0,0 +1,61 @@
+package org.apache.hadoop.hbase.coprocessor;
+
+import java.io.IOException;
+import com.google.protobuf.RpcCallback;
+import com.google.protobuf.RpcController;
+import com.google.protobuf.Service;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.CoprocessorEnvironment;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.GetUserGroupsRequest;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.GetUserGroupsResponse;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshService;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshUserToGroupsMappingsRequest;
+import org.apache.hadoop.hbase.protobuf.generated.RefreshProtos.RefreshUserToGroupsMappingsResponse;
+import org.apache.hadoop.security.Groups;
+
+public class RefreshServiceCoprocessor
+    implements Coprocessor, CoprocessorService, SingletonCoprocessorService, RefreshService.Interface {
+
+  public static final Log LOG = LogFactory.getLog(RefreshServiceCoprocessor.class);
+
+  @Override
+  public Service getService() {
+    return RefreshService.newReflectiveService(this);
+  }
+
+  @Override
+  public void refreshUserToGroupsMappings(RpcController controller, RefreshUserToGroupsMappingsRequest request,
+      RpcCallback<RefreshUserToGroupsMappingsResponse> done) {
+    Groups.getUserToGroupsMappingService().refresh();
+    done.run(RefreshUserToGroupsMappingsResponse.newBuilder().build());
+  }
+
+  @Override
+  public void getUserGroups(RpcController controller, GetUserGroupsRequest request,
+      RpcCallback<GetUserGroupsResponse> done) {
+    String user = request.getUser();
+    GetUserGroupsResponse.Builder builder = GetUserGroupsResponse.newBuilder();
+    try {
+      for (String group : Groups.getUserToGroupsMappingService().getGroups(user)) {
+        builder.addGroups(group);
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    GetUserGroupsResponse response = builder.build();
+    done.run(response);
+  }
+
+  @Override
+  public void start(CoprocessorEnvironment env) throws IOException {
+    LOG.info("RefreshServiceCoprocessor start");
+  }
+
+  @Override
+  public void stop(CoprocessorEnvironment env) throws IOException {
+    LOG.info("RefreshServiceCoprocessor stop");
+  }
+
+}
