 .../regionserver/MetricsRegionServerSource.java    |  2 +
 .../hbase/regionserver/MetricsRegionWrapper.java   |  1 +
 .../regionserver/MetricsRegionSourceImpl.java      |  6 ++-
 .../regionserver/TestMetricsRegionSourceImpl.java  |  5 +++
 .../apache/hadoop/hbase/regionserver/HStore.java   | 10 +++++
 .../regionserver/MetricsRegionWrapperImpl.java     | 21 ++++++++++
 .../apache/hadoop/hbase/regionserver/Store.java    |  1 +
 .../hadoop/hbase/regionserver/StripeState.java     | 31 ++++++++++++++
 .../hbase/regionserver/StripeStoreEngine.java      |  2 +-
 .../hbase/regionserver/StripeStoreFileManager.java | 49 +++++++---------------
 .../regionserver/MetricsRegionWrapperStub.java     |  5 +++
 .../regionserver/TestStripeStoreFileManager.java   |  5 ++-
 12 files changed, 99 insertions(+), 39 deletions(-)

diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
index 9961d63..18c3f09 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
@@ -45,6 +45,8 @@ public interface MetricsRegionServerSource extends BaseSource {
    */
   String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
 
+  String STRIPE_KEY = "stripeInfo";
+  String STRIPE_DESC = "The stripe information of the region";
   /**
    * Update the Put time histogram
    *
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java
index 7d61f81..a167b25 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java
@@ -88,4 +88,5 @@ public interface MetricsRegionWrapper {
    * Get the time spent by coprocessors in this region.
    */
   Map<String, DescriptiveStatistics> getCoprocessorExecutionStatistics();
+  String getStripeInfo();
 }
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
index df23942..a6d950b 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
@@ -223,6 +223,10 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
         MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "99th percentile: "), ds
           .getPercentile(99d) / 1000);
     }
-
+    String stripeInfo = this.regionWrapper.getStripeInfo();
+    if(stripeInfo != null && !"".equals(stripeInfo.trim())){
+      mrb.tag(Interns.info(regionNamePrefix + MetricsRegionServerSource.STRIPE_KEY,
+        MetricsRegionServerSource.STRIPE_DESC), stripeInfo);
+    }
   }
 }
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsRegionSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsRegionSourceImpl.java
index 4be8905..9aedc79 100644
--- a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsRegionSourceImpl.java
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsRegionSourceImpl.java
@@ -128,5 +128,10 @@ public class TestMetricsRegionSourceImpl {
     public Map<String, DescriptiveStatistics> getCoprocessorExecutionStatistics() {
       return null;
     }
+
+    @Override
+    public String getStripeInfo() {
+      return null;
+    }
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
index c647301..a5ad98b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
@@ -138,6 +138,7 @@ public class HStore implements Store {
   protected final MemStore memstore;
   // This stores directory in the filesystem.
   private final HRegion region;
+  private StripeState stripes;
   private final HColumnDescriptor family;
   private final HRegionFileSystem fs;
   private Configuration conf;
@@ -2406,4 +2407,13 @@ public class HStore implements Store {
   public double getCompactionPressure() {
     return storeEngine.getStoreFileManager().getCompactionPressure();
   }
+
+  @Override
+  public StripeState getStripes() {
+    return this.stripes;
+  }
+  
+  public void setStripes(StripeState stripes) {
+    this.stripes = stripes;
+  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperImpl.java
index be05f3e..1d20c4f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperImpl.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperImpl.java
@@ -33,6 +33,8 @@ import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.metrics2.MetricsExecutor;
 
+import com.google.common.collect.ImmutableList;
+
 @InterfaceAudience.Private
 public class MetricsRegionWrapperImpl implements MetricsRegionWrapper, Closeable {
 
@@ -45,6 +47,7 @@ public class MetricsRegionWrapperImpl implements MetricsRegionWrapper, Closeable
   private long numStoreFiles;
   private long memstoreSize;
   private long storeFileSize;
+  private String stripeInfo;
   private Map<String, DescriptiveStatistics> coprocessorTimes;
 
   private ScheduledFuture<?> regionMetricsUpdateTask;
@@ -143,17 +146,30 @@ public class MetricsRegionWrapperImpl implements MetricsRegionWrapper, Closeable
       long tempMemstoreSize = 0;
       long tempStoreFileSize = 0;
 
+      StringBuilder stripeStr = new StringBuilder();
       if (region.stores != null) {
         for (Store store : region.stores.values()) {
           tempNumStoreFiles += store.getStorefilesCount();
           tempMemstoreSize += store.getMemStoreSize();
           tempStoreFileSize += store.getStorefilesSize();
+          StripeState state = store.getStripes();
+          if(state != null){
+            stripeStr.append(store.getColumnFamilyName()).append("_level_0,")
+              .append(state.level0Files.size()).append(";");
+            int index = 0;
+            for(ImmutableList<StoreFile> stripe : state.stripeFiles){
+              stripeStr.append(store.getColumnFamilyName()).append("_stripe_")
+                .append(index).append(",").append(stripe.size()).append(";");
+              index ++;
+            }
+          }
         }
       }
 
       numStoreFiles = tempNumStoreFiles;
       memstoreSize = tempMemstoreSize;
       storeFileSize = tempStoreFileSize;
+      stripeInfo = stripeStr.toString();
       coprocessorTimes = region.getCoprocessorHost().getCoprocessorExecutionStatistics();
 
     }
@@ -169,4 +185,9 @@ public class MetricsRegionWrapperImpl implements MetricsRegionWrapper, Closeable
     return coprocessorTimes;
   }
 
+  @Override
+  public String getStripeInfo() {
+    return stripeInfo;
+  }
+
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
index a77fc0e..f249851 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
@@ -62,6 +62,7 @@ public interface Store extends HeapSize, StoreConfigInformation, PropagatingConf
   KeyValue.KVComparator getComparator();
 
   Collection<StoreFile> getStorefiles();
+  StripeState getStripes();
 
   /**
    * Close all the readers We don't need to worry about subsequent requests because the Region
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeState.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeState.java
new file mode 100644
index 0000000..f4e0e78
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeState.java
@@ -0,0 +1,31 @@
+package org.apache.hadoop.hbase.regionserver;
+
+import java.util.ArrayList;
+
+import com.google.common.collect.ImmutableList;
+
+/**
+ * The state class. Used solely to replace results atomically during
+ * compactions and avoid complicated error handling.
+ */
+public class StripeState {
+  /**
+   * The end rows of each stripe. The last stripe end is always open-ended, so it's not stored
+   * here. It is invariant that the start row of the stripe is the end row of the previous one
+   * (and is an open boundary for the first one).
+   */
+  public byte[][] stripeEndRows = new byte[0][];
+
+  /**
+   * Files by stripe. Each element of the list corresponds to stripeEndRow element with the
+   * same index, except the last one. Inside each list, the files are in reverse order by
+   * seqNum. Note that the length of this is one higher than that of stripeEndKeys.
+   */
+  public ArrayList<ImmutableList<StoreFile>> stripeFiles = new ArrayList<ImmutableList<StoreFile>>();
+  /** Level 0. The files are in reverse order by seqNum. */
+  public ImmutableList<StoreFile> level0Files = ImmutableList.<StoreFile>of();
+
+  /** Cached list of all files in the structure, to return from some calls */
+  public ImmutableList<StoreFile> allFilesCached = ImmutableList.<StoreFile>of();
+  public ImmutableList<StoreFile> allCompactedFilesCached = ImmutableList.<StoreFile>of();
+}
\ No newline at end of file
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreEngine.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreEngine.java
index b910527..30a58e8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreEngine.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreEngine.java
@@ -60,7 +60,7 @@ public class StripeStoreEngine extends StoreEngine<StripeStoreFlusher,
       Configuration conf, Store store, KVComparator comparator) throws IOException {
     this.config = new StripeStoreConfig(conf, store);
     this.compactionPolicy = new StripeCompactionPolicy(conf, store, config);
-    this.storeFileManager = new StripeStoreFileManager(comparator, conf, this.config);
+    this.storeFileManager = new StripeStoreFileManager(store, comparator, conf, this.config);
     this.storeFlusher = new StripeStoreFlusher(
       conf, store, this.compactionPolicy, this.storeFileManager);
     this.compactor = new StripeCompactor(conf, store);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
index dff6765..3fb0f48 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
@@ -80,32 +80,7 @@ public class StripeStoreFileManager
   public final static byte[] OPEN_KEY = HConstants.EMPTY_BYTE_ARRAY;
   final static byte[] INVALID_KEY = null;
 
-  /**
-   * The state class. Used solely to replace results atomically during
-   * compactions and avoid complicated error handling.
-   */
-  private static class State {
-    /**
-     * The end rows of each stripe. The last stripe end is always open-ended, so it's not stored
-     * here. It is invariant that the start row of the stripe is the end row of the previous one
-     * (and is an open boundary for the first one).
-     */
-    public byte[][] stripeEndRows = new byte[0][];
-
-    /**
-     * Files by stripe. Each element of the list corresponds to stripeEndRow element with the
-     * same index, except the last one. Inside each list, the files are in reverse order by
-     * seqNum. Note that the length of this is one higher than that of stripeEndKeys.
-     */
-    public ArrayList<ImmutableList<StoreFile>> stripeFiles
-      = new ArrayList<ImmutableList<StoreFile>>();
-    /** Level 0. The files are in reverse order by seqNum. */
-    public ImmutableList<StoreFile> level0Files = ImmutableList.<StoreFile>of();
-
-    /** Cached list of all files in the structure, to return from some calls */
-    public ImmutableList<StoreFile> allFilesCached = ImmutableList.<StoreFile>of();
-  }
-  private State state = null;
+  private StripeState state = null;
 
   /** Cached file metadata (or overrides as the case may be) */
   private HashMap<StoreFile, byte[]> fileStarts = new HashMap<StoreFile, byte[]>();
@@ -117,12 +92,14 @@ public class StripeStoreFileManager
 
   private final KVComparator kvComparator;
   private StripeStoreConfig config;
+  private Store store;
 
   private final int blockingFileCount;
 
   public StripeStoreFileManager(
-      KVComparator kvComparator, Configuration conf, StripeStoreConfig config) {
+	  Store store, KVComparator kvComparator, Configuration conf, StripeStoreConfig config) {
     this.kvComparator = kvComparator;
+    this.store = store;
     this.config = config;
     this.blockingFileCount = conf.getInt(
         HStore.BLOCKING_STOREFILES_KEY, HStore.DEFAULT_BLOCKING_STOREFILE_COUNT);
@@ -148,7 +125,7 @@ public class StripeStoreFileManager
   @Override
   public ImmutableCollection<StoreFile> clearFiles() {
     ImmutableCollection<StoreFile> result = state.allFilesCached;
-    this.state = new State();
+    this.state = new StripeState();
     this.fileStarts.clear();
     this.fileEnds.clear();
     return result;
@@ -436,7 +413,7 @@ public class StripeStoreFileManager
     }
 
     // Copy the results into the fields.
-    State state = new State();
+    StripeState state = new StripeState();
     state.level0Files = ImmutableList.copyOf(level0Files);
     state.stripeFiles = new ArrayList<ImmutableList<StoreFile>>(candidateStripes.size());
     state.stripeEndRows = new byte[Math.max(0, candidateStripes.size() - 1)][];
@@ -452,6 +429,7 @@ public class StripeStoreFileManager
     }
     state.allFilesCached = ImmutableList.copyOf(newAllFiles);
     this.state = state;
+    ((HStore)this.store).setStripes(state);
     debugDumpState("Files loaded");
   }
 
@@ -672,16 +650,16 @@ public class StripeStoreFileManager
         processNewCandidateStripes(newStripes);
       }
       // Create new state and update parent.
-      State state = createNewState();
+      StripeState state = createNewState();
       StripeStoreFileManager.this.state = state;
       updateMetadataMaps();
     }
 
-    private State createNewState() {
-      State oldState = StripeStoreFileManager.this.state;
+    private StripeState createNewState() {
+      StripeState oldState = StripeStoreFileManager.this.state;
       // Stripe count should be the same unless the end rows changed.
       assert oldState.stripeFiles.size() == this.stripeFiles.size() || this.stripeEndRows != null;
-      State newState = new State();
+      StripeState newState = new StripeState();
       newState.level0Files = (this.level0Files == null) ? oldState.level0Files
           : ImmutableList.copyOf(this.level0Files);
       newState.stripeEndRows = (this.stripeEndRows == null) ? oldState.stripeEndRows
@@ -696,6 +674,7 @@ public class StripeStoreFileManager
       if (!isFlush) newAllFiles.removeAll(compactedFiles);
       newAllFiles.addAll(results);
       newState.allFilesCached = ImmutableList.copyOf(newAllFiles);
+      ((HStore)StripeStoreFileManager.this.store).setStripes(newState);
       return newState;
     }
 
@@ -933,7 +912,7 @@ public class StripeStoreFileManager
   public Collection<StoreFile> getUnneededFiles(long maxTs, List<StoreFile> filesCompacting) {
     // 1) We can never get rid of the last file which has the maximum seqid in a stripe.
     // 2) Files that are not the latest can't become one due to (1), so the rest are fair game.
-    State state = this.state;
+    StripeState state = this.state;
     Collection<StoreFile> expiredStoreFiles = null;
     for (ImmutableList<StoreFile> stripe : state.stripeFiles) {
       expiredStoreFiles = findExpiredFiles(stripe, maxTs, filesCompacting, expiredStoreFiles);
@@ -961,7 +940,7 @@ public class StripeStoreFileManager
 
   @Override
   public double getCompactionPressure() {
-    State stateLocal = this.state;
+    StripeState stateLocal = this.state;
     if (stateLocal.allFilesCached.size() > blockingFileCount) {
       // just a hit to tell others that we have reached the blocking file count.
       return 2.0;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperStub.java
index 2658c0a..7c9f63b 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperStub.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapperStub.java
@@ -89,4 +89,9 @@ public class MetricsRegionWrapperStub implements MetricsRegionWrapper {
   public Map<String, DescriptiveStatistics> getCoprocessorExecutionStatistics() {
     return new HashMap<String, DescriptiveStatistics>();
   }
+
+  @Override
+  public String getStripeInfo() {
+    return null;
+  }
 }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStripeStoreFileManager.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStripeStoreFileManager.java
index 36a726d..3b34860 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStripeStoreFileManager.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStripeStoreFileManager.java
@@ -588,9 +588,10 @@ public class TestStripeStoreFileManager {
 
   private static StripeStoreFileManager createManager(
       ArrayList<StoreFile> sfs, Configuration conf) throws Exception {
+    Store store = Mockito.mock(HStore.class);
     StripeStoreConfig config = new StripeStoreConfig(
-        conf, Mockito.mock(StoreConfigInformation.class));
-    StripeStoreFileManager result = new StripeStoreFileManager(new KVComparator(), conf, config);
+        conf, store);
+    StripeStoreFileManager result = new StripeStoreFileManager(store, new KVComparator(), conf, config);
     result.loadFiles(sfs);
     return result;
   }
